// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Frequency {
  DAILY
}

enum SummaryType {
  BRIEF
  DETAILED
}

model Org {
  id        String    @id @default(uuid())
  slack_id  String    @unique @db.VarChar(11)
  users     User[]
  summaries Summary[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("org")
}

model User {
  id           String    @id @default(uuid())
  slack_id     String    @db.VarChar(11)
  timezone     String
  org_id       String
  summary_time Int       @default(9)
  org          Org       @relation(fields: [org_id], references: [id])
  summaries    Summary[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")

  @@unique([slack_id, org_id])
  @@map("users")
}

model Summary {
  id         String      @id @default(uuid())
  org_id     String
  user_id    String
  channel_id String      @db.VarChar(11)
  frequency  Frequency
  type       SummaryType
  org        Org         @relation(fields: [org_id], references: [id])
  user       User        @relation(fields: [user_id], references: [id])
  logs       Log[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @updatedAt @map("updated_at")

  @@unique([org_id, user_id, channel_id, frequency])
  @@unique([org_id, user_id, channel_id, type])
  @@map("summaries")
}

model Log {
  id             String   @id @default(uuid())
  summary_id     String
  summary        Summary  @relation(fields: [summary_id], references: [id], onDelete: Cascade)
  last_timestamp DateTime
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("logs")
}
